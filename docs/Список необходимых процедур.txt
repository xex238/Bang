ОЧЕНЬ ВАЖНО!!!
Сообщение из БД "0 ОК" должно содержать только английские буквы!!!

Общий вид процедуры/функции:
- [Имя функции]
Перефаваемые значения в процедуру/функцию: [параметр_1, параметр_2, ..., параметр_n]
Возвращаемые значения из процедуры/функции: [значение_1, значение_2, ..., значение_n]
Описание процедуры/функции

1) Процедуры для сервера
- Регистрация (запрос на регистрацию)
[mail, password, login]
[code]
code = 0 OK - регистрация возможна
code = -1 ERROR - возникла ошибка
code = 1 WARNING - пользователь с таким логином уже существует в системе
code = 2 WARNING - пользователь с данной почтой и паролей уже существует в системе
Процедура должна проверить, допустима ли регистрация для данного пользователя или нет

- Регистрация (процедура регистрации)
[mail, password, login]
[message]
message = 0 OK - регистрация прошла успешно
message = -1 ERROR - возникла ошибка
Процедура позволяет создать нового пользователя в таблице "User" и в связанных с ней таблице (таблице "Achievements")

- Авторизация
[mail, password]
[message]
message = 0 OK - пользователь существует в системе
message = -1 ERROR - возникла ошибка
Процедура позволяет проверить, существует ли данный пользователь в таблице User

- Получение списка комнат
[]
[список комнат из таблицы Room, в которых есть свободное место и у которых статус = "open"]
Процедура позволяет получить список комнат с помощью запроса SELECT

- Получение списка достижений для выбранного пользователя
[mail, password]
[строка достижений для выбранного пользователя]
Процедура позволяет получить список достижений выбранного пользователя с помощью запроса SELECT

- Создание комнаты
[owner_ID, max_count_of_players]
[room_ID]
Процедура позволяет создать запись в таблице "Room" и в связанных с ней таблицах, заполнить часть полей значениями по умолчанию и вернуть ID комнаты

2) Процедуры для комнаты.
2.1) Подготовка к началу игры
- Добавление игрока в комнату
[mail, password, room_ID]
[count_of_players, max_count_of_players (из таблицы Room), user_ID (из таблицы User)]
Процедура позволяет создать запись в таблице "Player" и в связанных с ней таблицах. Позволяет получить данные из таблицы "Room" и значение поля "user_ID" из таблицы "User"

- Получение 3 * n случайных персонажей (без повторений)
[3 * n]
[character_ID_11, character_ID_12, character_ID_13
character_ID_21, character_ID_22, character_ID_23
...
character_ID_n1, character_ID_n2, character_ID_n3]
Процедура позволяет получить 3 * n случайных без повторений значений поля "ID" из таблицы "Characters" и вернуть значение как при SELECT запросе,
где первый столбец - "character_ID_1", второй столбец - "character_ID_2", третий столбец - "character_ID_3"

- Получение n случайных ролей (НО ПО ПРАВИЛАМ ВЫДАЧИ РОЛЕЙ!!!)
Правила выдачи ролей:
4 игрока: 1 шериф, 2 бандита, 1 ренегат
5 игроков: 1 шериф, 2 бандита, 1 ренегат, 1 помощник
6 игроков: 1 шериф, 3 бандита, 1 ренегат, 1 помощник
7 игроков: 1 шериф, 3 бандита, 1 ренегат, 2 помощника
[n]
[role_ID_1, role_ID_2, ..., role_ID_n]
Процедура позволяет получить n случайных значений поля "ID" из таблицы "Roles" по правилам выдачи ролей

- Добавление выбранного персонажа к игроку
[player_ID, character_ID]
[code]
code = "0 OK" - записи успешно созданы
Процедура позволяет создать запись в таблице "Character" и связанных с ней таблицах ("Player" и "Characters"). Возвращает код в зависимости от успешности выполнения процедуры

- Добавление роли к игроку
[player_ID, role_ID]
[code]
code = "0 OK" - записи успешно созданы
Процедура позволяет создать запись в таблице "Role" и связанных с ней таблицах ("Player" и "Roles"). Возвращает код в зависимости от успешности выполнения процедуры

- Выдача стартовых карт игроку
[player_ID]
[card_ID_1, card_ID_2, ..., card_ID_n]
Процедура позволяет создать записи в таблице "Card", связать данные записи с соответствующей записью в таблице "Player" и вернуть ID значения добавленных карт
Рекомендации: сначала создать запрос на то, какое количество начальных карт должен получить игрок в начале игры (столько, сколько у его персонажа максимальное количество жизней), затем вызвать процедуру из пункта 3 на выдачу n количества карт игроку




3) Процедуры для реализации игрового процесса
- Проверка на наличие заданной карты у игрока
[player_ID, card_ID]
[result]
result = "YES" - если карта имеется
result = "NO" - если карта отсутствует
Процедура позволяет проверить, существует ли связь между player_ID и card_ID

- Выдача n карт игроку в закрытую
[player_ID, n]
[card_ID_1, card_ID_2, ..., card_ID_n]
Процедура позволяет создать записи в таблице "Card", связать данные записи с соответствующей записью в таблице "Player" и вернуть ID значения добавленных карт
